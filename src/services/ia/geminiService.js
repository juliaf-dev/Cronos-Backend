// src/services/ia/geminiService.js
const { GEMINI_API_KEY } = require('../../config/env');

// Fallback para fetch em ambientes Node que n√£o tenham fetch global
if (typeof globalThis.fetch !== 'function') {
  globalThis.fetch = (...args) =>
    import('node-fetch').then(({ default: f }) => f(...args));
}

const BASE = 'https://generativelanguage.googleapis.com/v1beta';

// ---------- Fun√ß√£o base ----------
async function geminiGenerate(model, contents) {
  if (!GEMINI_API_KEY) {
    throw new Error('GEMINI_API_KEY ausente no .env');
  }

  const url = `${BASE}/models/${model}:generateContent?key=${encodeURIComponent(
    GEMINI_API_KEY
  )}`;

  let resp;
  try {
    resp = await globalThis.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ contents }),
    });
  } catch (err) {
    console.error('Erro de conex√£o com Gemini API:', err);
    throw new Error('Falha de conex√£o com Gemini API');
  }

  if (!resp.ok) {
    const txt = await resp.text().catch(() => '');
    console.error(`Gemini erro ${resp.status}: ${txt}`);
    throw new Error(`Gemini erro ${resp.status}`);
  }

  let json;
  try {
    json = await resp.json();
  } catch (err) {
    console.error('Erro ao parsear JSON da Gemini API:', err);
    throw new Error('Resposta inv√°lida da Gemini API');
  }

  // üîπ Log da resposta bruta para debug
  console.log("Gemini JSON bruto:", JSON.stringify(json, null, 2));

  const text =
    json?.candidates?.[0]?.content?.parts
      ?.map((p) => p.text)
      .filter(Boolean)
      .join(' ')
      .trim() || '';

  if (!text) {
    console.warn('‚ö†Ô∏è Gemini retornou vazio', JSON.stringify(json, null, 2));
  }

  return text;
}

// ---------- Bloco pedag√≥gico fixo ----------
const basePedagogica = `
üìò Fundamentos pedag√≥gicos fixos (n√£o inventar fora disso):

TRI (Teoria de Resposta ao Item):
- Mede profici√™ncia do aluno, n√£o apenas acertos brutos.
- Par√¢metros: Dificuldade (D), Discrimina√ß√£o (A), Acerto Casual (C).
- Errar quest√£o f√°cil pesa mais do que acertar apenas quest√µes dif√≠ceis.
- Estrat√©gia: dominar quest√µes f√°ceis e m√©dias antes das dif√≠ceis.

Matriz ENEM (Ci√™ncias Humanas):
- H1 a H28: interpreta√ß√£o de textos, an√°lise hist√≥rica, cr√≠tica social.
- Cobran√ßa interdisciplinar (Hist√≥ria + Geografia + Filosofia + Sociologia).
- Quest√µes trazem textos, gr√°ficos e imagens como suporte.

BNCC:
- Desenvolver compet√™ncias gerais: pensamento cr√≠tico, argumenta√ß√£o, consci√™ncia hist√≥rica e cidadania.
- Conectar conte√∫dos a contextos atuais e √† vida pr√°tica do estudante.

Exemplos de quest√µes do ENEM:
- Hist√≥ria: Era Vargas (2022, interpreta√ß√£o de fontes).
- Hist√≥ria: Revolu√ß√£o Francesa (2019, contextualiza√ß√£o hist√≥rica).
- Geografia: Guerra Fria (2023, blocos geopol√≠ticos).
- Geografia: Desmatamento Amaz√¥nico (2021, impactos ambientais).
- Filosofia: Hobbes e Contratualismo (2017).
- Sociologia: Marx e Capitalismo (2016).
`;

// ---------- Conte√∫do did√°tico ----------
async function gerarConteudoHTML({ materia, topico, subtopico }) {
  const model = 'gemini-1.5-flash';
  const prompt = `
${basePedagogica}

Voc√™ √© um professor especialista no ENEM. 
Gere um conte√∫do did√°tico completo, claro e bonito, alinhado √† BNCC e √† Matriz do ENEM.
Use apenas HTML v√°lido interno (sem <html>, <head> ou <body>).
‚ö†Ô∏è N√£o use <h1> nem coloque t√≠tulos extras autom√°ticos.

üìå Diretrizes de estilo:
- Comece com uma introdu√ß√£o em <p>.
- Use subt√≠tulos em <h2> e <h3> para dividir se√ß√µes (teoria, exemplos, aplica√ß√µes, dicas).
- Inclua listas (<ul>, <ol>) para exemplos, passos ou conceitos centrais.
- Use <blockquote> para curiosidades, cita√ß√µes ou conex√µes hist√≥ricas.
- Termine com uma conclus√£o motivadora, conectando o aprendizado ao ENEM.

üìå Contexto do aluno:
Mat√©ria: ${materia}
T√≥pico: ${topico}
Subt√≥pico: ${subtopico}

‚ö†Ô∏è IMPORTANTE:
- Responda em HTML organizado e limpo.
- N√£o invente dados ou fatos fora do contexto fornecido.
- N√£o fale diretamente com o leitor, mantenha o tom impessoal.
`.trim();

  return geminiGenerate(model, [{ role: 'user', parts: [{ text: prompt }] }]);
}

// ---------- Quest√µes estilo ENEM adaptadas para flashcards ----------
async function gerarQuestoesComContexto({
  materia,
  topico,
  subtopico,
  conteudo,
  quantidade = 5,
}) {
  const model = "gemini-1.5-flash";

  const tituloBase =
    typeof conteudo === "object" && conteudo?.titulo ? conteudo.titulo : subtopico;
  const textoBase =
    typeof conteudo === "object"
      ? conteudo.texto || conteudo.texto_html || ""
      : String(conteudo || "");

  const prompt = `
${basePedagogica}

Voc√™ √© um elaborador de quest√µes no estilo ENEM.
Crie exatamente ${quantidade} quest√µes de m√∫ltipla escolha (A-E) com apenas UMA correta.

üìå Diretrizes pedag√≥gicas:
- Use TRI (f√°cil, m√©dio, dif√≠cil).
- Conecte-se √†s compet√™ncias e habilidades da Matriz ENEM (H1‚ÄìH28).
- Contextualize como no ENEM: textos, gr√°ficos, documentos, an√°lises.

üìå Contexto base:
Mat√©ria: ${materia}
T√≥pico: ${topico}
Subt√≥pico: ${subtopico}
T√≠tulo: ${tituloBase}
Texto de apoio:
${textoBase}

üìå FORMATO EXATO DE SA√çDA (para flashcards):
Q) [Enunciado]
A) [alternativa A]
B) [alternativa B]
C) [alternativa C]
D) [alternativa D]
E) [alternativa E]
RESPOSTA CORRETA: [letra de A a E]
EXPLICA√á√ÉO: [justificativa pedag√≥gica]

‚ö†Ô∏è IMPORTANTE:
- N√£o use numera√ß√£o nas quest√µes (apenas "Q)").
- Explica√ß√µes devem ser curtas, did√°ticas e ajudar na fixa√ß√£o.
`.trim();

  return geminiGenerate(model, [{ role: "user", parts: [{ text: prompt }] }]);
}

const gerarQuestoes = gerarQuestoesComContexto;

// ---------- Assistente/chat ----------

async function chatAssistente({ contexto, mensagem }) {
  const model = "gemini-1.5-flash";

  // üîπ Fun√ß√£o para limpar HTML e manter apenas texto simples
  const stripHTML = (html) => {
    if (!html || typeof html !== "string") return "";
    return html.replace(/<[^>]+>/g, " ").replace(/\s+/g, " ").trim();
  };

  let prompt = `
${basePedagogica}

Voc√™ √© um Assistente Educacional moderno, especializado em ajudar estudantes do Ensino M√©dio a se prepararem para o ENEM.  
Sua resposta deve ser **clara, bem estruturada, fundamentada e motivadora**.  
Escreva em HTML indentado e organizado, mas sem <html>, <head> ou <body>.  
`.trim();

  if (contexto && (contexto.conteudo || contexto.conteudo_id)) {
    const conteudoTexto = stripHTML(contexto.conteudo);

    prompt += `
üìñ Contexto atual do estudante:
O aluno est√° estudando o subt√≥pico: <em>${contexto.subtopico || "n√£o especificado"}</em>.  

üìå Texto base para a resposta (conte√∫do que o aluno est√° lendo):
"${conteudoTexto}"

‚û°Ô∏è Sua explica√ß√£o deve **come√ßar j√° introduzindo o tema do subt√≥pico** e depois responder √† pergunta.  
`.trim();
  } else {
    prompt += `
üìñ Contexto atual do estudante:
N√£o h√° conte√∫do espec√≠fico informado.  
Responda de forma geral, mas √∫til e conectada ao ENEM.  
`.trim();
  }

  prompt += `
‚ùì Pergunta do estudante:
"${mensagem}"

üìå Instru√ß√µes finais:
- Estruture em introdu√ß√£o (sobre o subt√≥pico), explica√ß√£o, exemplos e conclus√£o.  
- Use <p>, <ul>, <ol>, <blockquote>, <strong>, <em>.  
- ‚ùå Nunca use <h1>, <h2>.  
- Sempre conecte ao ENEM mostrando como esse conte√∫do pode aparecer em prova.  
`.trim();

  const resposta = await geminiGenerate(model, [
    { role: "user", parts: [{ text: prompt }] }
  ]);

  return resposta || "N√£o consegui elaborar uma explica√ß√£o no momento.";
}


module.exports = {
  geminiGenerate,
  gerarConteudoHTML,
  gerarQuestoesComContexto,
  gerarQuestoes,
  chatAssistente,
};

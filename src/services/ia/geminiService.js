// src/services/ia/geminiService.js
const { GEMINI_API_KEY } = require('../../config/env');

// Fallback para fetch em ambientes Node
if (typeof globalThis.fetch !== 'function') {
  globalThis.fetch = (...args) =>
    import('node-fetch').then(({ default: f }) => f(...args));
}

const BASE = 'https://generativelanguage.googleapis.com/v1beta';

// Contador local de requisi√ß√µes (zera quando o server reinicia)
let requestCount = 0;

// ---------- Fun√ß√£o base ----------
async function geminiGenerate(model, contents) {
  if (!GEMINI_API_KEY) {
    throw new Error('GEMINI_API_KEY ausente no .env');
  }

  requestCount++;
  console.log(`üì° [Gemini] Chamada n¬∫ ${requestCount}`);

  const url = `${BASE}/models/${model}:generateContent?key=${encodeURIComponent(
    GEMINI_API_KEY
  )}`;

  let resp;
  try {
    console.log("üöÄ Enviando requisi√ß√£o para Gemini API...");
    resp = await globalThis.fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ contents }),
    });
  } catch (err) {
    console.error('‚ùå Erro de conex√£o com Gemini API:', err);
    return "‚ö†Ô∏è Falha de conex√£o com Gemini API.";
  }

  if (!resp.ok) {
    const txt = await resp.text().catch(() => '');
    console.error(`‚ùå Gemini erro ${resp.status}: ${txt}`);

    if (resp.status === 429) {
      return "‚ö†Ô∏è Limite di√°rio de requisi√ß√µes √† Gemini API foi atingido. Tente novamente amanh√£ ou configure uma chave paga.";
    }

    return `‚ö†Ô∏è Erro na Gemini API (status ${resp.status}).`;
  }

  let json;
  try {
    json = await resp.json();
  } catch (err) {
    console.error('‚ùå Erro ao parsear JSON da Gemini API:', err);
    return "‚ö†Ô∏è Resposta inv√°lida da Gemini API.";
  }

  console.log("üì© Gemini JSON bruto:", JSON.stringify(json, null, 2));

  const text =
    json?.candidates?.[0]?.content?.parts
      ?.map((p) => p.text)
      .filter(Boolean)
      .join(' ')
      .trim() || '';

  if (!text) {
    console.warn('‚ö†Ô∏è Gemini retornou vazio', JSON.stringify(json, null, 2));
    return "‚ö†Ô∏è Gemini n√£o retornou conte√∫do.";
  }

  return text;
}

// ---------- Bloco pedag√≥gico fixo ----------
const basePedagogica = `üìò Fundamentos pedag√≥gicos fixos (n√£o inventar fora disso):

TRI (Teoria de Resposta ao Item):
- Mede profici√™ncia do aluno, n√£o apenas acertos brutos.
- Par√¢metros: Dificuldade (D), Discrimina√ß√£o (A), Acerto Casual (C).
- Errar quest√£o f√°cil pesa mais do que acertar apenas quest√µes dif√≠ceis.
- Estrat√©gia: dominar quest√µes f√°ceis e m√©dias antes das dif√≠ceis.

Matriz ENEM (Ci√™ncias Humanas):
- H1 a H28: interpreta√ß√£o de textos, an√°lise hist√≥rica, cr√≠tica social.
- Cobran√ßa interdisciplinar (Hist√≥ria + Geografia + Filosofia + Sociologia).
- Quest√µes trazem textos, gr√°ficos e imagens como suporte.

BNCC:
- Desenvolver compet√™ncias gerais: pensamento cr√≠tico, argumenta√ß√£o, consci√™ncia hist√≥rica e cidadania.
- Conectar conte√∫dos a contextos atuais e √† vida pr√°tica do estudante.

Exemplos de quest√µes do ENEM:
- Hist√≥ria: Era Vargas (2022, interpreta√ß√£o de fontes).
- Hist√≥ria: Revolu√ß√£o Francesa (2019, contextualiza√ß√£o hist√≥rica).
- Geografia: Guerra Fria (2023, blocos geopol√≠ticos).
- Geografia: Desmatamento Amaz√¥nico (2021, impactos ambientais).
- Filosofia: Hobbes e Contratualismo (2017).
- Sociologia: Marx e Capitalismo (2016).
`;

// ---------- Conte√∫do did√°tico ----------
async function gerarConteudoHTML({ materia, topico, subtopico }) {
  const model = 'gemini-1.5-flash';
  const prompt = `Gere um resumo did√°tico em HTML estruturado (com <h2>, <p>, <ul>, <li>) 
para auxiliar no estudo de ENEM, vestibulares e concursos.

Tema:
- Mat√©ria: ${materia}
- T√≥pico: ${topico}
- Subt√≥pico: ${subtopico}

Use a base pedag√≥gica abaixo apenas como refer√™ncia conceitual (N√ÉO inclua diretamente no texto final do aluno):
${basePedagogica}`;

  const resposta = await geminiGenerate(model, [
    { role: 'user', parts: [{ text: prompt }] }
  ]);

  return typeof resposta === "string" ? resposta : String(resposta);
}

// ---------- Quest√µes estilo ENEM (formato flashcard) ----------
async function gerarQuestoesComContexto({ materia, topico, subtopico, conteudo, quantidade = 5 }) {
  const model = "gemini-1.5-flash";

  const stripHTML = (html) =>
    (!html || typeof html !== "string")
      ? ""
      : html.replace(/<[^>]+>/g, " ").replace(/\s+/g, " ").trim();

  const conteudoBase = stripHTML(conteudo);

  const prompt = `Crie ${quantidade} quest√µes de m√∫ltipla escolha no estilo ENEM,
no formato JSON de flashcards.  

‚ö†Ô∏è Regras obrigat√≥rias:
- Alternativas devem sempre estar em ordem alfab√©tica (A at√© E).
- A alternativa com a resposta correta deve variar entre as quest√µes .
- O JSON deve ser v√°lido e utiliz√°vel diretamente.

Formato esperado:
[
  {
    "pergunta": "Enunciado da quest√£o",
    "alternativas": ["A) ...", "B) ...", "C) ...", "D) ...", "E) ..."],
    "resposta_correta": "A",
    "explicacao": "Explica√ß√£o curta e did√°tica"
  }
]

üìñ Texto de refer√™ncia:
"${conteudoBase}"

Use a base pedag√≥gica abaixo apenas como refer√™ncia conceitual (N√ÉO inclua diretamente no texto final do aluno):
${basePedagogica}`;

  const resposta = await geminiGenerate(model, [
    { role: "user", parts: [{ text: prompt }] }
  ]);

  return typeof resposta === "string" ? resposta : String(resposta);
}
const gerarQuestoes = gerarQuestoesComContexto;

// ---------- Assistente/chat ----------
async function chatAssistente({ contexto, mensagem }) {
  const model = "gemini-1.5-flash";
  const stripHTML = (html) =>
    (!html || typeof html !== "string")
      ? ""
      : html.replace(/<[^>]+>/g, " ").replace(/\s+/g, " ").trim();

  let prompt = `O estudante fez a seguinte pergunta: "${mensagem}"

Use a base pedag√≥gica abaixo apenas como refer√™ncia conceitual (N√ÉO inclua diretamente no texto final do aluno):
${basePedagogica}
`;

  if (contexto && (contexto.conteudo || contexto.conteudo_id)) {
    const conteudoTexto = stripHTML(contexto.conteudo);
    console.log("üìñ Conte√∫do enviado ao Gemini (subt√≥pico:", contexto.subtopico, "):");
    console.log(conteudoTexto.slice(0, 500) + (conteudoTexto.length > 500 ? "..." : ""));
    prompt += `üìñ O estudante est√° estudando o subt√≥pico "${contexto.subtopico}".
Use tamb√©m este conte√∫do como refer√™ncia:
"${conteudoTexto}"\n\n`;
  } else {
    console.log("‚ÑπÔ∏è Nenhum conte√∫do enviado ao Gemini (resposta geral).");
  }

  prompt += `Responda de forma did√°tica, estruturada em HTML (<p>, <ul>, <blockquote>), conectando o tema ao ENEM.`;

  console.log("üìù Prompt final enviado ao Gemini:", prompt.slice(0, 1000) + (prompt.length > 1000 ? "...": ""));

  const resposta = await geminiGenerate(model, [
    { role: "user", parts: [{ text: prompt }] }
  ]);

  return typeof resposta === "string"
    ? resposta
    : "‚ö†Ô∏è N√£o consegui elaborar uma explica√ß√£o no momento.";
}

module.exports = {
  geminiGenerate,
  gerarConteudoHTML,
  gerarQuestoesComContexto,
  gerarQuestoes,
  chatAssistente,
};
